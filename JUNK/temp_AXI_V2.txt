// README
//  This is a copy of the AXI file that correctly generates the pacman screen in the top left. NOT CENTERED ON SCREEN.




`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: ECE-Illinois
// Engineer: Zuofu Cheng
// 
// Create Date: 06/08/2023 12:21:05 PM
// Design Name: 
// Module Name: hdmi_text_controller_v1_0_AXI
// Project Name: ECE 385 - hdmi_text_controller
// Target Devices: 
// Tool Versions: 
// Description: 
// This is a modified version of the Vivado template for an AXI4-Lite peripheral,
// rewritten into SystemVerilog for use with ECE 385.
// 
// Dependencies: 
// 
// Revision:
// Revision 0.02 - File modified to be more consistent with generated template
// Revision 11/18 - Made comments less confusing
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module hdmi_text_controller_v1_0_AXI #
(

    // Parameters of Axi Slave Bus Interface S_AXI
    // Modify parameters as necessary for access of full VRAM range

    // Width of S_AXI data bus
    parameter integer C_S_AXI_DATA_WIDTH	= 32,
    // Width of S_AXI address bus
    parameter integer C_S_AXI_ADDR_WIDTH	= 14
)
(
    // Users to add ports here
    input logic[9:0] drawX,
    input logic[9:0] drawY,
    output logic[3:0] R,
    output logic[3:0] G,
    output logic[3:0] B,
    // User ports ends

    // Global Clock Signal
    input logic  S_AXI_ACLK,
    // Global Reset Signal. This Signal is Active LOW
    input logic  S_AXI_ARESETN,
    // Write address (issued by master, acceped by Slave)
    input logic [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR,
    // Write channel Protection type. This signal indicates the
        // privilege and security level of the transaction, and whether
        // the transaction is a data access or an instruction access.
    input logic [2 : 0] S_AXI_AWPROT,
    // Write address valid. This signal indicates that the master signaling
        // valid write address and control information.
    input logic  S_AXI_AWVALID,
    // Write address ready. This signal indicates that the slave is ready
        // to accept an address and associated control signals.
    output logic  S_AXI_AWREADY,
    // Write data (issued by master, acceped by Slave) 
    input logic [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA,
    // Write strobes. This signal indicates which byte lanes hold
        // valid data. There is one write strobe bit for each eight
        // bits of the write data bus.    
    input logic [(C_S_AXI_DATA_WIDTH/8)-1 : 0] S_AXI_WSTRB,
    // Write valid. This signal indicates that valid write
        // data and strobes are available.
    input logic  S_AXI_WVALID,
    // Write ready. This signal indicates that the slave
        // can accept the write data.
    output logic  S_AXI_WREADY,
    // Write response. This signal indicates the status
        // of the write transaction.
    output logic [1 : 0] S_AXI_BRESP,
    // Write response valid. This signal indicates that the channel
        // is signaling a valid write response.
    output logic  S_AXI_BVALID,
    // Response ready. This signal indicates that the master
        // can accept a write response.
    input logic  S_AXI_BREADY,
    // Read address (issued by master, acceped by Slave)
    input logic [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR,
    // Protection type. This signal indicates the privilege
        // and security level of the transaction, and whether the
        // transaction is a data access or an instruction access.
    input logic [2 : 0] S_AXI_ARPROT,
    // Read address valid. This signal indicates that the channel
        // is signaling valid read address and control information.
    input logic  S_AXI_ARVALID,
    // Read address ready. This signal indicates that the slave is
        // ready to accept an address and associated control signals.
    output logic  S_AXI_ARREADY,
    // Read data (issued by slave)
    output logic [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA,
    // Read response. This signal indicates the status of the
        // read transfer.
    output logic [1 : 0] S_AXI_RRESP,
    // Read valid. This signal indicates that the channel is
        // signaling the required read data.
    output logic  S_AXI_RVALID,
    // Read ready. This signal indicates that the master can
        // accept the read data and response information.
    input logic  S_AXI_RREADY
);

// AXI4LITE signals
logic  [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_awaddr;
logic  axi_awready;
logic  axi_wready;
logic  [1 : 0] 	axi_bresp;
logic  axi_bvalid;
logic  [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_araddr;
logic  axi_arready;
logic  [C_S_AXI_DATA_WIDTH-1 : 0] 	axi_rdata;
logic  [1 : 0] 	axi_rresp;
logic  	axi_rvalid;

// Example-specific design signals
// local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
// ADDR_LSB is used for addressing 32/64 bit registers/memories
// ADDR_LSB = 2 for 32 bits (n downto 2)
// ADDR_LSB = 3 for 64 bits (n downto 3)
localparam integer ADDR_LSB = (C_S_AXI_DATA_WIDTH/32) + 1;
localparam integer OPT_MEM_ADDR_BITS = 11;
//----------------------------------------------
//-- Signals for user logic register space example
//------------------------------------------------
//-- Number of Slave Registers 4
//logic [C_S_AXI_DATA_WIDTH-1:0]	slv_reg0;
//logic [C_S_AXI_DATA_WIDTH-1:0]	slv_reg1;
//logic [C_S_AXI_DATA_WIDTH-1:0]	slv_reg2;
//logic [C_S_AXI_DATA_WIDTH-1:0]	slv_reg3;
//
//Note: the provided Verilog template had the registered declared as above, but in order to give 
//students a hint we have replaced the 4 individual registers with an unpacked array of packed logic. 
//Note that you as the student will still need to extend this to the full register set needed for the lab.
logic	 slv_reg_rden;
logic	 slv_reg_wren;
logic [C_S_AXI_DATA_WIDTH-1:0]	 reg_data_out;
integer	 byte_index;
logic	 aw_en;

logic [C_S_AXI_DATA_WIDTH-1:0]	 palette_regs[8];

///////////// ADDED SIGNALS //////////////////////
logic [31:0] data_pipe;

logic [6:0] cur_glyph_X;    // Allows for 80 glyphs in a column
logic [5:0] cur_glyph_Y;    // Allows for 30 glyphs in a row
logic [2:0] cur_pixel_X;    // Allows for glyphs of width 8     
logic [2:0] cur_pixel_Y;    // Allows for glyphs of height 8   

logic [6:0] clamped_glyph_X;
logic [5:0] clamped_glyph_Y;
logic [9:0] tilemap_idx;            

logic [7:0] tile_code;
logic [10:0] rom_addr;
logic [7:0] rom_data;
logic pixel_data;


logic [3:0] tilemap_wen;
logic [C_S_AXI_ADDR_WIDTH-1 : 0] tilemap_addra;

// I/O Connections assignments

assign S_AXI_AWREADY	= axi_awready;
assign S_AXI_WREADY	= axi_wready;
assign S_AXI_BRESP	= axi_bresp;
assign S_AXI_BVALID	= axi_bvalid;
assign S_AXI_ARREADY = axi_arready;
assign S_AXI_RDATA	= axi_rdata;
assign S_AXI_RRESP	= axi_rresp;
assign S_AXI_RVALID	= axi_rvalid;


// Implement axi_awready generation
// axi_awready is asserted for one S_AXI_ACLK clock cycle when both
// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is
// de-asserted when reset is low.

always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
      axi_awready <= 1'b0;
      aw_en <= 1'b1;
    end 
  else
    begin    
      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
        begin
          // slave is ready to accept write address when 
          // there is a valid write address and write data
          // on the write address and data bus. This design 
          // expects no outstanding transactions. 
          axi_awready <= 1'b1;
          aw_en <= 1'b0;
        end
        else if (S_AXI_BREADY && axi_bvalid)
            begin
              aw_en <= 1'b1;
              axi_awready <= 1'b0;
            end
      else           
        begin
          axi_awready <= 1'b0;
        end
    end 
end       

// Implement axi_awaddr latching
// This process is used to latch the address when both 
// S_AXI_AWVALID and S_AXI_WVALID are valid. 

always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
      axi_awaddr <= 0;
    end 
  else
    begin    
      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
        begin
          // Write Address latching 
          axi_awaddr <= S_AXI_AWADDR;
        end
    end 
end       

// Implement axi_wready generation
// axi_wready is asserted for one S_AXI_ACLK clock cycle when both
// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is 
// de-asserted when reset is low. 
always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
      axi_wready <= 1'b0;
    end 
  else
    begin    
      if (~axi_wready && S_AXI_WVALID && S_AXI_AWVALID && aw_en )
        begin
          // slave is ready to accept write data when 
          // there is a valid write address and write data
          // on the write address and data bus. This design 
          // expects no outstanding transactions. 
          axi_wready <= 1'b1;
        end
      else
        begin
          axi_wready <= 1'b0;
        end
    end 
end       

// Implement memory mapped register select and write logic generation
// The write data is accepted and written to memory mapped registers when
// axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to
// select byte enables of slave registers while writing.
// These registers are cleared when reset (active low) is applied.
// Slave register write enable is asserted when valid address and data are available
// and the slave is ready to accept the write address and write data.

assign slv_reg_wren = axi_wready && S_AXI_WVALID && axi_awready && S_AXI_AWVALID;

always_comb begin
    if(slv_reg_wren && ~axi_awaddr[ADDR_LSB + OPT_MEM_ADDR_BITS]) begin
        tilemap_wen = S_AXI_WSTRB;
        tilemap_addra = axi_awaddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB];
    end
    else begin                                                    
        tilemap_addra = axi_araddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB];
        tilemap_wen = 4'b0000;
  end
end

always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
        for (integer i = 0; i < 8; i++)
        begin
           palette_regs[i] <= 0;
        end
    end
  else begin
    if (slv_reg_wren && axi_awaddr[ADDR_LSB + OPT_MEM_ADDR_BITS]) begin
        for (byte_index = 0; byte_index < 4; byte_index++) begin
            if(S_AXI_WSTRB[byte_index] == 1) begin
                palette_regs[axi_awaddr[ADDR_LSB + OPT_MEM_ADDR_BITS:ADDR_LSB] - 2048][(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
            end 
        end
    end 
  end
end    

// Implement write response logic generation
// The write response and response valid signals are asserted by the slave 
// when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted.  
// This marks the acceptance of address and indicates the status of 
// write transaction.

always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
      axi_bvalid  <= 0;
      axi_bresp   <= 2'b0;
    end 
  else
    begin    
      if (axi_awready && S_AXI_AWVALID && ~axi_bvalid && axi_wready && S_AXI_WVALID)
        begin
          // indicates a valid write response is available
          axi_bvalid <= 1'b1;
          axi_bresp  <= 2'b0; // 'OKAY' response 
        end                   // work error responses in future
      else
        begin
          if (S_AXI_BREADY && axi_bvalid) 
            //check if bready is asserted while bvalid is high) 
            //(there is a possibility that bready is always asserted high)   
            begin
              axi_bvalid <= 1'b0; 
            end  
        end
    end
end   

// Implement axi_arready generation
// axi_arready is asserted for one S_AXI_ACLK clock cycle when
// S_AXI_ARVALID is asserted. axi_awready is 
// de-asserted when reset (active low) is asserted. 
// The read address is also latched when S_AXI_ARVALID is 
// asserted. axi_araddr is reset to zero on reset assertion.

always_ff @( posedge S_AXI_ACLK )
begin
  if ( S_AXI_ARESETN == 1'b0 )
    begin
      axi_arready <= 1'b0;
      axi_araddr  <= 32'b0;
    end 
  else
    begin    
      if (~axi_arready && S_AXI_ARVALID)
        begin
          // indicates that the slave has acceped the valid read address
          axi_arready <= 1'b1;
          // Read address latching
          axi_araddr  <= S_AXI_ARADDR;
        end
      else
        begin
          axi_arready <= 1'b0;
        end
    end 
end       

// Implement axi_arvalid generation
// axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both 
// S_AXI_ARVALID and axi_arready are asserted. The slave registers 
// data are available on the axi_rdata bus at this instance. The 
// assertion of axi_rvalid marks the validity of read data on the 
// bus and axi_rresp indicates the status of read transaction.axi_rvalid 
// is deasserted on reset (active low). axi_rresp and axi_rdata are 
// cleared to zero on reset (active low).    

// Implement memory mapped register select and read logic generation
// Slave register read enable is asserted when valid address is available
// and the slave is ready to accept the read address.
assign slv_reg_rden = axi_arready & S_AXI_ARVALID & ~axi_rvalid;
logic read_ready;
logic [1:0] count;

// Output register or memory read data
always_ff @( posedge S_AXI_ACLK )
begin
   if (S_AXI_ARESETN == 1'b0) begin
        axi_rvalid <= 0;
        axi_rresp <= 0;
   end
   else begin
        if(count == 3 && ~axi_rvalid)
        begin
            axi_rvalid <= 1'b1;
            axi_rresp <= 2'b0;
        end
        else if (axi_rvalid && S_AXI_RREADY) begin
            axi_rvalid <= 1'b0;  
        end
   end
end

always_ff @( posedge S_AXI_ACLK) begin
    if(~axi_arready && S_AXI_ARVALID)
        count <= 1;
    if(count == 1)
        count <= 2;
    if(count == 2) begin
        read_ready <= 1'b1;
        count <= 3;
    end
    if(count == 3) begin
        read_ready <= 1'b0;
        count <= 0;
    end
end

always_comb begin
    if (slv_reg_rden && axi_araddr[OPT_MEM_ADDR_BITS + ADDR_LSB])
        data_pipe <= palette_regs[axi_araddr[OPT_MEM_ADDR_BITS + ADDR_LSB: ADDR_LSB] - 2048];
    else
        data_pipe <= data_pipe;
end 

always_ff @( posedge S_AXI_ACLK) begin
    if (S_AXI_ARESETN == 1'b0) begin
        axi_rdata <= 0;
    end
    else begin
        if (read_ready && ~axi_araddr[13])
            axi_rdata <= reg_data_out;
        else if (slv_reg_rden && axi_araddr[13])
            axi_rdata <= data_pipe;
    end
end


// Add user logic here    
always_comb
begin

    cur_glyph_X = drawX >> 3; //8x8
    cur_glyph_Y = drawY >> 3;
    
    // Current pixel within glyph
    cur_pixel_X = 7 - (drawX & 3'b111); //Left to Right
    cur_pixel_Y = drawY & 3'b111; // Mod 8
    
    ////////////////////////////////////////    
    if (cur_glyph_X >= 28) begin
        clamped_glyph_X = 27;
    end
    else begin
        clamped_glyph_X = cur_glyph_X[6:0];
    end
    
    if (cur_glyph_Y >= 36) begin
        clamped_glyph_Y = 35; 
    end 
    else begin
        clamped_glyph_Y = cur_glyph_Y[5:0];
    end
   
    ///////////////////////////////////////////

        tilemap_idx = (clamped_glyph_Y * 28) + clamped_glyph_X;
        rom_addr = {tile_code, cur_pixel_Y};
        pixel_data = rom_data[cur_pixel_X]; 

    if(cur_glyph_X < 28 && cur_glyph_Y < 36) begin
        case (tile_code)
            8'h00: begin // Empty space (black background)
                R = pixel_data ? 4'h0 : 4'h0;
                G = pixel_data ? 4'h0 : 4'h0;
                B = pixel_data ? 4'h0 : 4'h0;
            end
            8'h01, 8'h02: begin // Pellet (yellow dot on black)
                R = pixel_data ? 4'hF : 4'h0;
                G = pixel_data ? 4'hF : 4'h0;
                B = pixel_data ? 4'h0 : 4'h0;
            end
            8'h03, 8'h04, 8'h05, 8'h06, 8'h07, 8'h08, 8'h09, 8'h0A, 8'h0B, 8'h0C, 8'h0D,
            8'h0E, 8'h0F, 8'h10, 8'h11, 8'h12, 8'h13, 8'h14, 8'h15, 8'h16, 8'h17, 8'h18,
            8'h19, 8'h1A, 8'h1B, 8'h1C, 8'h1D, 8'h1E, 8'h1F, 8'h20, 8'h21, 8'h22: begin // Walls (blue)
                R = pixel_data ? 4'h0 : 4'h0;
                G = pixel_data ? 4'h0 : 4'h0;
                B = pixel_data ? 4'hF : 4'h0;
            end
            8'h27, 8'h28, 8'h29, 8'h2A, 8'h2B, 8'h2C, 8'h2D, 8'h2E, 8'h2F, 8'h30, 8'h31,
            8'h32, 8'h33, 8'h34, 8'h35, 8'h36, 8'h37, 8'h38, 8'h39, 8'h3A, 8'h3B: begin // Text White
                R = pixel_data ? 4'hF : 4'h0;
                G = pixel_data ? 4'hF : 4'h0;
                B = pixel_data ? 4'hF : 4'h0;
            end
            default: begin // Unknown tiles (grey for debugging)
                R = pixel_data ? 4'h8 : 4'h0;
                G = pixel_data ? 4'h8 : 4'h0;
                B = pixel_data ? 4'h8 : 4'h0;
            end
        endcase
    end
    else
    begin
            R = 4'b0000;
            G = 4'b0000;
            B = 4'b0000;
   end
end
// User logic ends

// Instantiate the Tilemap module
Tilemap tilemap_inst (
    .clk(S_AXI_ACLK),
    .addr_a(tilemap_addra[9:0]),
    .data_a(reg_data_out),
    .addr_b(tilemap_idx),
    .data_in_b(S_AXI_WDATA[7:0]),
    .we_b(tilemap_wen[0]),
    .data_b(tile_code)
);


// Font ROM Module
font_rom fonts(
    .addr(rom_addr),     
    .data(rom_data)  
);
   



endmodule

