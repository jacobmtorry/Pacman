#include "ghosts.h"
#include "tilemap.h"

extern uint8_t read_tile(uint16_t px, uint16_t py);

/* ───── constants / helpers ───── */
#define HALF_GHOST (GHOST_SIZE / 2)   /* 7 px from top‑left to centre */
#define HALF_TILE  (TILE_WIDTH  / 2)  /* 4 px from tile edge to centre */

static inline int on_tile_center(uint16_t cx, uint16_t cy)
{
    return (((cx - MAZE_X_OFFSET - HALF_TILE) % TILE_WIDTH  == 0) &&
            ((cy - MAZE_Y_OFFSET - HALF_TILE) % TILE_HEIGHT == 0));
}
static inline int walkable(uint8_t t) { return t <= 0x02; }

/* ───── API ───── */
void init_ghost(Ghost *g, uint8_t tile_x, uint8_t tile_y)
{
    g->x = MAZE_X_OFFSET + tile_x * TILE_WIDTH  + HALF_TILE - HALF_GHOST;
    g->y = MAZE_Y_OFFSET + tile_y * TILE_HEIGHT + HALF_TILE - HALF_GHOST;
    g->direction = DIR_NONE;
}

int valid_ghost_move(int dir, uint16_t x, uint16_t y)
{
    /* centre of the sprite right now */
    uint16_t cx = x + HALF_GHOST;
    uint16_t cy = y + HALF_GHOST;

    /* work out which tile we are in                                      */
    int8_t tile_x = (cx - MAZE_X_OFFSET) / TILE_WIDTH;
    int8_t tile_y = (cy - MAZE_Y_OFFSET) / TILE_HEIGHT;

    switch (dir) {
        case DIR_LEFT:  --tile_x; break;
        case DIR_RIGHT: ++tile_x; break;
        case DIR_UP:    --tile_y; break;
        case DIR_DOWN:  ++tile_y; break;
        default: return 0;
    }

    /* centre of the neighbouring tile we want to enter                   */
    uint16_t tx = MAZE_X_OFFSET + tile_x * TILE_WIDTH  + HALF_TILE;
    uint16_t ty = MAZE_Y_OFFSET + tile_y * TILE_HEIGHT + HALF_TILE;

    return walkable( read_tile(tx, ty) );
}

int choose_direction(Ghost *g)
{
    int dx = g->target_x - g->x;
    int dy = g->target_y - g->y;

    if (abs(dx) > abs(dy)) {
        if (dx > 0 && valid_ghost_move(DIR_RIGHT, g->x, g->y)) return DIR_RIGHT;
        if (dx < 0 && valid_ghost_move(DIR_LEFT , g->x, g->y)) return DIR_LEFT;
    }
    if (dy > 0 && valid_ghost_move(DIR_DOWN , g->x, g->y)) return DIR_DOWN;
    if (dy < 0 && valid_ghost_move(DIR_UP   , g->x, g->y)) return DIR_UP;

    /* fallback options – keeps ghost moving if first choice is blocked   */
    if (valid_ghost_move(DIR_LEFT , g->x, g->y)) return DIR_LEFT;
    if (valid_ghost_move(DIR_RIGHT, g->x, g->y)) return DIR_RIGHT;
    if (valid_ghost_move(DIR_UP   , g->x, g->y)) return DIR_UP;
    if (valid_ghost_move(DIR_DOWN , g->x, g->y)) return DIR_DOWN;

    return DIR_NONE;
}

static inline void step(Ghost *g, int speed)
{
    switch (g->direction) {
        case DIR_LEFT:  g->x -= speed; break;
        case DIR_RIGHT: g->x += speed; break;
        case DIR_UP:    g->y -= speed; break;
        case DIR_DOWN:  g->y += speed; break;
        default: break;
    }
}

void update_ghost(Ghost *g, uint16_t pac_x, uint16_t pac_y)
{
    uint16_t cx = g->x + HALF_GHOST;
    uint16_t cy = g->y + HALF_GHOST;

    /* need a new decision when:                                         */
    /*  – we are nicely centred, or                                      */
    /*  – the path ahead just became blocked                             */
    if (g->direction == DIR_NONE ||
        !valid_ghost_move(g->direction, g->x, g->y) ||
        on_tile_center(cx, cy))
    {
        g->target_x  = pac_x;
        g->target_y  = pac_y;
        g->direction = choose_direction(g);
    }

    if (valid_ghost_move(g->direction, g->x, g->y))
        step(g, 1);          /* 1‑pixel‑per‑frame speed                */
}
