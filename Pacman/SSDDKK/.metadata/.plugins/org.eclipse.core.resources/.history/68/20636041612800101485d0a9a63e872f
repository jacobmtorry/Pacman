#include "ghosts.h"
#include "tilemap.h"

extern uint8_t read_tile(uint16_t px, uint16_t py);

/* ──────────────── handy constants ──────────────── */
#define HALF_GHOST   (GHOST_SIZE / 2)      /* 7  */
#define HALF_TILE    (TILE_WIDTH / 2)      /* 4  */

/* centre‑of‑tile test ------------------------------------------------------- */
static inline int on_tile_center(uint16_t cx, uint16_t cy)
{
    /* subtract HALF_TILE so that cx,cy that lie on a tile‑centre give 0 mod 8  */
    return (((cx - MAZE_X_OFFSET - HALF_TILE) % TILE_WIDTH  == 0) &&
            ((cy - MAZE_Y_OFFSET - HALF_TILE) % TILE_HEIGHT == 0));
}

/* walkable map codes: 0x00 blank | 0x01 pellet | 0x02 power pellet ---------- */
static inline int walkable(uint8_t t) { return t <= 0x02; }

/* ─────────────── initialise ─────────────── */
void init_ghost(Ghost *g, uint8_t tile_x, uint8_t tile_y)
{
    /* sprite’s top‑left so its centre sits exactly on the chosen 8×8 tile‑centre */
    g->x = MAZE_X_OFFSET + tile_x * TILE_WIDTH  + HALF_TILE - HALF_GHOST;
    g->y = MAZE_Y_OFFSET + tile_y * TILE_HEIGHT + HALF_TILE - HALF_GHOST;

    g->direction = DIR_NONE;
}

/* test the *next* tile in the requested direction (using the sprite’s centre) */
static int valid_ghost_move(int dir, uint16_t x, uint16_t y)
{
    uint16_t cx = x + HALF_GHOST;          /* current centre */
    uint16_t cy = y + HALF_GHOST;

    /* tile index whose centre the ghost is *currently* nearest to               */
    int8_t tile_x = (cx - MAZE_X_OFFSET + HALF_TILE) / TILE_WIDTH;
    int8_t tile_y = (cy - MAZE_Y_OFFSET + HALF_TILE) / TILE_HEIGHT;

    switch (dir) {
        case DIR_LEFT:  --tile_x; break;
        case DIR_RIGHT: ++tile_x; break;
        case DIR_UP:    --tile_y; break;
        case DIR_DOWN:  ++tile_y; break;
        default: return 0;
    }

    /* centre‑of‑that‑tile in pixel space                                        */
    uint16_t tx = MAZE_X_OFFSET + tile_x * TILE_WIDTH  + HALF_TILE;
    uint16_t ty = MAZE_Y_OFFSET + tile_y * TILE_HEIGHT + HALF_TILE;

    return walkable(read_tile(tx, ty));
}

/* greedy chase – x priority, then y, with fall‑backs                           */
static int choose_direction(Ghost *g)
{
    int dx = g->target_x - g->x;
    int dy = g->target_y - g->y;

    if (abs(dx) > abs(dy)) {
        if (dx > 0 && valid_ghost_move(DIR_RIGHT, g->x, g->y)) return DIR_RIGHT;
        if (dx < 0 && valid_ghost_move(DIR_LEFT , g->x, g->y)) return DIR_LEFT;
    }
    if (dy > 0 && valid_ghost_move(DIR_DOWN , g->x, g->y)) return DIR_DOWN;
    if (dy < 0 && valid_ghost_move(DIR_UP   , g->x, g->y)) return DIR_UP;

    /* simple fall‑backs (prevents getting stuck in dead‑ends) */
    if (valid_ghost_move(DIR_LEFT , g->x, g->y)) return DIR_LEFT;
    if (valid_ghost_move(DIR_RIGHT, g->x, g->y)) return DIR_RIGHT;
    if (valid_ghost_move(DIR_UP   , g->x, g->y)) return DIR_UP;
    if (valid_ghost_move(DIR_DOWN , g->x, g->y)) return DIR_DOWN;

    return DIR_NONE;
}

/* single‑pixel step ---------------------------------------------------------- */
static inline void step(Ghost *g)
{
    switch (g->direction) {
        case DIR_LEFT:  --g->x; break;
        case DIR_RIGHT: ++g->x; break;
        case DIR_UP:    --g->y; break;
        case DIR_DOWN:  ++g->y; break;
        default: break;
    }
}

/* ─────────────── main update ─────────────── */
void update_ghost(Ghost *g, uint16_t pac_x, uint16_t pac_y)
{
    uint16_t cx = g->x + HALF_GHOST;
    uint16_t cy = g->y + HALF_GHOST;
    int       centred = on_tile_center(cx, cy);

    /* 1. if we’re *exactly* on a tile‑centre ‑> pick a new direction            */
    if (centred) {
        g->target_x  = pac_x;
        g->target_y  = pac_y;
        g->direction = choose_direction(g);
    }

    /* 2. move one pixel **unconditionally** – the choice above guarantees that
          at a centre we pick a valid tile, so we won’t crash into walls.        */
    step(g);
}
