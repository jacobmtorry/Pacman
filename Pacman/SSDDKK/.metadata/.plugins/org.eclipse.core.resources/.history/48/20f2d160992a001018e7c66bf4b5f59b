#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "lw_usb/GenericMacros.h"
#include "lw_usb/GenericTypeDefs.h"
#include "lw_usb/MAX3421E.h"
#include "lw_usb/USB.h"
#include "lw_usb/usb_ch9.h"
#include "lw_usb/transfer.h"
#include "lw_usb/HID.h"

#include "tilemap.h"
#include "ghosts.h"
#include "directions.h"

#include "xparameters.h"
#include <xgpio.h>

extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define HDMI_BASE_ADDR 0x44A00000


// Pac-Man sprite dimensions
#define PACMAN_WIDTH 13
#define PACMAN_HEIGHT 13
#define PACMAN_CENTER (PACMAN_WIDTH / 2) // 6 pixels (13/2)

// Pac-Man movement registers
#define PACMAN_X_OFFSET 0x2000
#define PACMAN_Y_OFFSET 0x2004

// Ghost movement Registers
#define RED_OFFSET 0x2008
#define PINK_OFFSET 0x200C
#define BLUE_OFFSET 0x2010
#define ORANGE_OFFSET 0x2014

#define SCARED_OFFSET 0x2018
#define DIRECTION_OFFSET 0x201C

// Position shift masks
#define XY_MASK   0x3FF      // 00000000001111111111b
#define X_SHIFT   10         // bits 19-10 hold X

#define LEFT_TUNNEL_X_LIMIT  MAZE_X_OFFSET  // or 0
#define RIGHT_TUNNEL_X_LIMIT (MAZE_X_OFFSET + ((MAZE_WIDTH - 1) * TILE_WIDTH))

#define GHOST_CENTER  (GHOST_SIZE / 2)
#define COLLISION_PADDING 5  // Shrinks collision box by 2 pixels on each side


// Internal function declerations
void game_loop();
uint8_t read_tile(uint16_t pixel_x, uint16_t pixel_y);
void write_tile(uint16_t pixel_x, uint16_t pixel_y, uint8_t tile);
void write_number(uint16_t tile_x, uint16_t tile_y, uint8_t tile);
void draw_number(uint16_t tile_x, uint16_t tile_y, uint8_t number);
int valid_move(int direction, uint16_t pacman_x, uint16_t pacman_y);
void update_score(int score);
void update_high_score(uint32_t score);
void reset_map();
int check_collision(uint16_t px, uint16_t py, Ghost* g);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////


BYTE GetDriverandReport() {
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	xil_printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
		tpl_ptr = GetDevtable(i);
		if (tpl_ptr->epinfo != NULL) {
			xil_printf("Device: %d", i);
			xil_printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
	if (rcode) {   //error handling
		xil_printf("GetIdle Error. Error code: ");
		xil_printf("%x \n", rcode);
	} else {
		xil_printf("Update rate: ");
		xil_printf("%x \n", tmpbyte);
	}
	xil_printf("Protocol: ");
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
	if (rcode) {   //error handling
		xil_printf("GetProto Error. Error code ");
		xil_printf("%x \n", rcode);
	} else {
		xil_printf("%d \n", tmpbyte);
	}
	return device;
}

int main() {
    init_platform();
    MAX3421E_init();
    USB_init();

    while (1) {
        MAX3421E_Task();
        USB_Task();

        if (GetUsbTaskState() == USB_STATE_RUNNING) {
            BYTE device = GetDriverandReport();
            if (device == 1) {
                xil_printf("Keyboard detected! Launching game...\n");
                game_loop();  // <- Start game loop, handle input inside
            }
        }
    }

    cleanup_platform();
    return 0;
}



void game_loop() {
    BOOT_KBD_REPORT kbdbuf;

    uint16_t pacman_x = 320;
    uint16_t pacman_y = 307;

    int lives = 3;
    int speed = 2;
    long score = 0;
    long high_score = 0;
    long pellet_count = 0;
    long power_pellet_count = 0;
    long rand_counter = 0;
    long scared_counter = 0;
    int scare_enable = 0;
    uint32_t scared_bits = 0;

    int current_dir = DIR_NONE;
    int desired_direction = DIR_NONE;

    Ghost red, pink, blue, orange;
    init_ghost(&red,    13, 14);  // Blinky
    init_ghost(&pink,   1, 4);  // Pinky (just an example location)
    init_ghost(&blue,   26, 4);  // Inky
    init_ghost(&orange, 26, 32);  // Clyde
    red.move = 1;
    pink.move = 2;
    blue.move = 3;
    orange.move = 4;



    while (1) {
        // USB stack updates
        MAX3421E_Task();
        USB_Task();

        // Poll keyboard
        BYTE rcode = kbdPoll(&kbdbuf);
        if (rcode == hrNAK) goto move_pacman;
        if (rcode) continue;

        BYTE key = kbdbuf.keycode[0];

        // Update direction on valid keypress
        switch (key) {
            case 0x04: current_dir = DIR_LEFT;  break; // A
            case 0x07: current_dir = DIR_RIGHT; break; // D
            case 0x1A: current_dir = DIR_UP;    break; // W
            case 0x16: current_dir = DIR_DOWN;  break; // S
        }


    move_pacman:

        // Attempt to switch to desired direction if it's valid

        // Move based on current direction
        switch (current_dir) {
            case DIR_LEFT:
            if(valid_move(DIR_LEFT, pacman_x, pacman_y)){
              pacman_x -= speed;
            }
            break;

            case DIR_RIGHT:
            if(valid_move(DIR_RIGHT, pacman_x, pacman_y)){
                pacman_x += speed;
            }
            break;

            case DIR_UP:
            if(valid_move(DIR_UP, pacman_x, pacman_y)){
                pacman_y -= speed;
            }
            break;

            case DIR_DOWN:
            if(valid_move(DIR_DOWN, pacman_x, pacman_y)){
                pacman_y += speed;
            }
            break;
        }
        
        if(pacman_x < LEFT_TUNNEL_X_LIMIT){
            pacman_x = RIGHT_TUNNEL_X_LIMIT - PACMAN_CENTER;
        } 
        if (pacman_x > RIGHT_TUNNEL_X_LIMIT){
            pacman_x = LEFT_TUNNEL_X_LIMIT + PACMAN_CENTER;
        }

        align_pacman_center(&pacman_x, &pacman_y, current_dir);

        red.rand = 0;
        pink.rand = (rand() % 4) + 1;
        blue.rand = 0;
        orange.rand = (rand() % 4) + 1;

        uint16_t tile_x = (pacman_x - MAZE_X_OFFSET) / TILE_WIDTH;
        uint16_t tile_y = (pacman_y - MAZE_Y_OFFSET) / TILE_HEIGHT;

        uint16_t aligned_x = tile_x * TILE_WIDTH + MAZE_X_OFFSET;
        uint16_t aligned_y = tile_y * TILE_HEIGHT + MAZE_Y_OFFSET;

        uint8_t tile = read_tile(aligned_x, aligned_y);

        if (tile == 0x01) {
            write_tile(aligned_x, aligned_y, 0x00);  // Clear pellet
            pellet_count += 1; // should be 240
            score += 10;
            update_score(score);
            if(score > high_score){
                high_score = score;
            }
            update_high_score(high_score);
        }
        if( tile == 0x02){
            write_tile(aligned_x, aligned_y, 0x00);  // Clear pellet
            power_pellet_count += 1;
            score += 50;
            scare_enable = 1;
            scared_counter = 1;
            red.scared = 1;
            pink.scared = 1;
            blue.scared = 1;
            orange.scared = 1;
            update_score(score);
            if(score > high_score){
                high_score = score;
            }
            update_high_score(high_score);
        }
        if(pellet_count >= 240 && power_pellet_count >= 4){ // If all the pellets been eated
            pellet_count = 0;
            power_pellet_count = 0;
            pacman_x = 320;
            pacman_y = 307;
            current_dir = 0;
            init_ghost(&red, 13, 14);  // Blinky
            init_ghost(&pink, 1, 4);  // Pinky (just an example location)
            init_ghost(&blue, 26, 4);  // Inky
            init_ghost(&orange, 26, 33);  // Clyde
            reset_map();
        }

        // Update HDMI peripheral with new position
        uint16_t top_left_x = pacman_x - PACMAN_CENTER;
        uint16_t top_left_y = pacman_y - PACMAN_CENTER;

        if (rand_counter % 4 == 0) {
            update_ghost(&red, pacman_x, pacman_y);
            update_ghost(&pink, pacman_x, pacman_y);
            update_ghost(&blue, pacman_x, pacman_y);
            update_ghost(&orange, pacman_x, pacman_y);
        }

        int check_red = check_collision(top_left_x, top_left_y, &red);
        int check_pink = check_collision(top_left_x, top_left_y, &pink);
        int check_blue = check_collision(top_left_x, top_left_y, &blue);
        int check_orange = check_collision(top_left_x, top_left_y, &orange);

        if(check_red == 1 || check_blue == 1 || check_pink == 1 || check_orange == 1){
            lives--;
            pacman_x = 320;
            pacman_y = 307;
            current_dir = DIR_NONE;
            init_ghost(&red, 13, 14);  // Blinky
            init_ghost(&pink, 1, 4);  // Pinky (just an example location)
            init_ghost(&blue, 26, 4);  // Inky
            init_ghost(&orange, 26, 33);  // Clyde
            sleep(1);
        } else if(check_red == 2 || check_blue == 2 || check_pink == 2 || check_orange == 2) {
            score += 200;
            update_score(score);
            if(score > high_score){
                high_score = score;
            }
            update_high_score(high_score);
            if(check_red == 2){
                ghost_die(&red);
            }else if(check_blue == 2){
                ghost_die(&blue);
            }else if(check_pink == 2){
                ghost_die(&pink);
            }else if(check_orange == 2){
                ghost_die(&orange);
            }
        }
        if(lives == 2){
            write_number(4, 34, 0x00);
            write_number(4, 35, 0x00);
            write_number(5, 35, 0x00);
            write_number(5, 34, 0x00);
        }
        if(lives == 1){
            write_number(2, 34, 0x00);
            write_number(2, 35, 0x00);
            write_number(3, 35, 0x00);
            write_number(3, 34, 0x00);

        }
        if(lives < 1){
            lives = 3;
            score = 0;
            update_score(score);
            if(score > high_score){
                high_score = score;
            }
            update_high_score(high_score);
            pacman_x = 320;
            pacman_y = 307;
            current_dir = DIR_NONE;
            init_ghost(&red, 13, 14);  // Blinky
            init_ghost(&pink, 1, 4);  // Pinky (just an example location)
            init_ghost(&blue, 26, 4);  // Inky
            init_ghost(&orange, 26, 33);  // Clyde
            Xil_Out32(HDMI_BASE_ADDR + SCARED_OFFSET, (((red.scared & 1) << 3) | ((pink.scared & 1) << 2) | ((blue.scared & 1) << 1) | (orange.scared & 1)));
            game_over();
        }

        if(scared_counter % 512 == 0){
            scare_enable = 0;
            red.scared = 0;
            pink.scared = 0;
            blue.scared = 0;
            orange.scared = 0;
        }



        // Reconstruct the xy for the registers.
        uint32_t red_xy = ((red.x & XY_MASK) << 10) | (red.y & XY_MASK);
        uint32_t pink_xy = ((pink.x & XY_MASK) << 10) | (pink.y & XY_MASK);
        uint32_t blue_xy = ((blue.x & XY_MASK) << 10) | (blue.y & XY_MASK);
        uint32_t orange_xy = ((orange.x & XY_MASK) << 10) | (orange.y & XY_MASK);
        scared_bits = (((red.scared & 1) << 3) | ((pink.scared & 1) << 2) | ((blue.scared & 1) << 1) | (orange.scared & 1));
        // goes to our color mapper
        Xil_Out32(HDMI_BASE_ADDR + PACMAN_X_OFFSET, top_left_x);
        Xil_Out32(HDMI_BASE_ADDR + PACMAN_Y_OFFSET, top_left_y);
        
        Xil_Out32(HDMI_BASE_ADDR + RED_OFFSET, red_xy);
        Xil_Out32(HDMI_BASE_ADDR + PINK_OFFSET, pink_xy);
        Xil_Out32(HDMI_BASE_ADDR + BLUE_OFFSET, blue_xy);
        Xil_Out32(HDMI_BASE_ADDR + ORANGE_OFFSET, orange_xy);
        
        Xil_Out32(HDMI_BASE_ADDR + SCARED_OFFSET, scared_bits);

        Xil_Out32(HDMI_BASE_ADDR + DIRECTION_OFFSET, current_dir);






        rand_counter++;
        if(scare_enable){
            scared_counter++;
        }

    }
}

uint8_t read_tile(uint16_t pixel_x, uint16_t pixel_y) {


    uint16_t tile_x = (pixel_x - MAZE_X_OFFSET) / TILE_WIDTH;
    uint16_t tile_y = (pixel_y - MAZE_Y_OFFSET) / TILE_HEIGHT;

    if (tile_x >= MAZE_WIDTH || tile_y >= MAZE_HEIGHT) {
        return 0xFF; // Out-of-bounds tile
    }

    uint32_t addr = (tile_y * MAZE_WIDTH + tile_x) * 4;
    //xil_printf("READ ||| Pac-Man at (%d, %d) | addr: %x\n", pixel_x, pixel_y, addr);
    return Xil_In8(HDMI_BASE_ADDR + addr);
}

void write_tile(uint16_t pixel_x, uint16_t pixel_y, uint8_t tile){
    uint16_t tile_x = (pixel_x / TILE_WIDTH) - (MAZE_X_OFFSET / TILE_WIDTH);
    uint16_t tile_y = (pixel_y  / TILE_HEIGHT) - (MAZE_Y_OFFSET / TILE_HEIGHT);
    uint32_t addr = (tile_y * MAZE_WIDTH + tile_x) * 4;
    //xil_printf("WRITE ||| Pac-Man at (%d, %d) | addr: %x\n", pixel_x, pixel_y, addr);
    Xil_Out32(HDMI_BASE_ADDR + addr, tile);
    return;
}

void write_number(uint16_t tile_x, uint16_t tile_y, uint8_t tile){
    uint32_t addr = (tile_y * MAZE_WIDTH + tile_x) * 4;
    Xil_Out32(HDMI_BASE_ADDR + addr, tile);
    return;
}

void draw_number(uint16_t tile_x, uint16_t tile_y, uint8_t number){
    switch(number){
    case 1:
    write_number(tile_x, tile_y, 0x32);
    break;
    case 2:
    write_number(tile_x, tile_y, 0x33);
    break;
    case 3:
    write_number(tile_x, tile_y, 0x34);
    break;
    case 4:
    write_number(tile_x, tile_y, 0x35);
    break;
    case 5:
    write_number(tile_x, tile_y, 0x36);
    break;
    case 6:
    write_number(tile_x, tile_y, 0x37);
    break;
    case 7:
    write_number(tile_x, tile_y, 0x38);
    break;
    case 8:
    write_number(tile_x, tile_y, 0x39);
    break;
    case 9:
    write_number(tile_x, tile_y, 0x3A);
    break;
    case 0:
    write_number(tile_x, tile_y, 0x31);
    break;
    }
}

int valid_move(int direction, uint16_t pacman_x, uint16_t pacman_y){
    if(direction == DIR_LEFT){ // If the intended direction is to the left then we need to check if the middle pacman Y is between
        if(read_tile(pacman_x - 4, pacman_y) <= 0x02){
            return 1;
        }
    }
    if(direction == DIR_RIGHT){
        if(read_tile(pacman_x + 4, pacman_y) <= 0x02 ){
            return 1;
        }
    }
    if(direction == DIR_UP){
        if(read_tile(pacman_x, pacman_y - 4) <= 0x02 ){
            return 1;
        }
    }
    if(direction == DIR_DOWN){
        if(read_tile(pacman_x, pacman_y + 4) <= 0x02){
            return 1;
        }
    }
    return 0; // otherwise we can not move which means we should keep the same direction
}

void update_score(int score){
    // We doin 5 digits
    int fifth_place = (score / 1) % 10;
    int fourth_place = (score / 10) % 10;
    int third_place = (score / 100) % 10;
    int second_place = (score / 1000) % 10; //
    int first_place = (score / 10000 ) % 10;

    draw_number(2, 1, first_place); //write MSB
    draw_number(3, 1, second_place);
    draw_number(4, 1, third_place);
    draw_number(5, 1, fourth_place);
    draw_number(6, 1, fifth_place); //write LSB base 10
}

void update_high_score(uint32_t high_score) {
    // We doin 5 digits
    int fifth_place = (high_score / 1) % 10;
    int fourth_place = (high_score / 10) % 10;
    int third_place = (high_score / 100) % 10;
    int second_place = (high_score / 1000) % 10; //
    int first_place = (high_score / 10000 ) % 10;

    draw_number(10, 1, first_place); //write MSB
    draw_number(11, 1, second_place);
    draw_number(12, 1, third_place);
    draw_number(13, 1, fourth_place);
    draw_number(14, 1, fifth_place); //write LSB base 10
}

void reset_map(){
       for (int j = 0; j < MAZE_HEIGHT; j++) {  // Loop over rows
           for (int i = 0; i < MAZE_WIDTH; i++) {  // Loop over columns

               // Compute address
               uint32_t addr = (j * MAZE_WIDTH + i) * 4;

               // Read the tile
               uint8_t current_tile = Xil_In8(HDMI_BASE_ADDR + addr);

               uint8_t reset_value = tilemap_reset[j * MAZE_WIDTH + i];

               // Check if the tile was a pellet
               if ((reset_value == 0x01 || reset_value == 0x02) && current_tile == 0x00) {
                   uint16_t pixel_x = (i + (MAZE_X_OFFSET / TILE_WIDTH)) * TILE_WIDTH;
                   uint16_t pixel_y = (j + (MAZE_Y_OFFSET / TILE_HEIGHT)) * TILE_HEIGHT;
                   write_tile(pixel_x, pixel_y, reset_value);
               }
           }
       }
}

int check_collision(uint16_t pac_x, uint16_t pac_y, Ghost* g) {
    uint16_t pac_left   = pac_x + COLLISION_PADDING;
    uint16_t pac_right  = pac_x + PACMAN_WIDTH - COLLISION_PADDING;
    uint16_t pac_top    = pac_y + COLLISION_PADDING;
    uint16_t pac_bottom = pac_y + PACMAN_HEIGHT - COLLISION_PADDING;

    uint16_t ghost_left   = g->x + COLLISION_PADDING;
    uint16_t ghost_right  = g->x + GHOST_SIZE - COLLISION_PADDING;
    uint16_t ghost_top    = g->y + COLLISION_PADDING;
    uint16_t ghost_bottom = g->y + GHOST_SIZE - COLLISION_PADDING;

    if (pac_right <= ghost_left || pac_left >= ghost_right ||
        pac_bottom <= ghost_top || pac_top >= ghost_bottom) {
        return 0; 
    }

    if (g->scared) {
        ghost_die(g);
        return 2;
    }
    return 1;
}


void ghost_die(Ghost* ghost){
    init_ghost(ghost, 13, 14); // Set to starting tile (x,y)
}


void game_over(){

    write_number(2, 34, 0x23);
    write_number(2, 35, 0x25);
    write_number(3, 35, 0x26);
    write_number(3, 34, 0x24);

    write_number(4, 34, 0x23);
    write_number(4, 35, 0x25);
    write_number(5, 35, 0x26);
    write_number(5, 34, 0x24);


    reset_map();
}

void align_pacman_center(uint16_t* px, uint16_t* py, int dir) {
    if (dir == DIR_LEFT || dir == DIR_RIGHT) {
        uint16_t center_y = *py + PACMAN_CENTER;
        uint16_t tile_y = (center_y - MAZE_Y_OFFSET) / TILE_HEIGHT;
        *py = tile_y * TILE_HEIGHT + 3 + MAZE_Y_OFFSET - PACMAN_CENTER;
    } else if (dir == DIR_UP || dir == DIR_DOWN) {
        uint16_t center_x = *px + PACMAN_CENTER;
        uint16_t tile_x = (center_x - MAZE_X_OFFSET) / TILE_WIDTH;
        *px = tile_x * TILE_WIDTH + 3 + MAZE_X_OFFSET - PACMAN_CENTER;
    }
}
